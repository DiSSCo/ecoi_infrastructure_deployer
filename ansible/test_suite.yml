---
# Ansible playbook for integration the OpenDS instance and provenance management
- hosts: cordra_servers
  gather_facts: yes
  vars:
    # In a local test environment TLS certificates are self-signed and therefore the tasks fail with validation on
    c_validation: "{% if deployment_config['default_provider']=='virtualbox' %}no{% else %}yes{% endif %}"
    base_url: "https://{% if cordra[inventory_hostname].domain != '_'%}{{ cordra[inventory_hostname].domain }}{% else %}{{ ansible_host }}{% endif %}"
  tasks:
    - name: Test if cordra servers are up and running
      block:
        - name: Get status
          uri:
            url: "{{ base_url }}/startupStatus"
            method: GET
            return_content: yes
            validate_certs: "{{ c_validation }}"
          register: cordra_is_up

        - name: Check if cordra is up and running
          assert:
            that:
              - cordra_is_up.json.state == "UP"
              - cordra_is_up.json.details.storage == "UP"
              - cordra_is_up.json.details.indexer == "UP"

        - name: Check that authorization works, POST without auth should return 401 not allowed
          uri:
            url: "{{ base_url }}/schemas"
            method: POST
            status_code: 401
            validate_certs: "{{ c_validation }}"

      rescue:
        - debug:
            msg: "ERROR in initial check if cordra is running on {{ inventory_hostname }}"
      always:
        - debug:
            msg: "FINISHED initial check if cordra is running on {{ inventory_hostname }} with {{ cordra_is_up }}"


- hosts: cordra_nsidr_server
  gather_facts: yes
  vars:
    # In a local test environment TLS certificates are self-signed and therefore the tasks fail with validation on
    c_validation: "{% if deployment_config['default_provider']=='virtualbox' %}no{% else %}yes{% endif %}"
    base_url: "https://{% if cordra[inventory_hostname].domain != '_'%}{{ cordra[inventory_hostname].domain }}{% else %}{{ ansible_host }}{% endif %}"
    base_url_prov: "https://{% if cordra.cordra_prov_server.domain != '_'%}{{ cordra.cordra_prov_server.domain }}{% else %}{{ cordra.cordra_prov_server.host_ip }}{% endif %}"
  tasks:
    - name: Test OpenDS CRUD and provenance operations
      block:
        - name: Get OpenDS schema
          uri:
            url: "{{ base_url }}/objects/{{ cordra.cordra_nsidr_server.handle_prefix }}/DigitalSpecimen_schema"
            status_code: 200
            validate_certs: "{{ c_validation }}"

        - name: Upload example OpenDS instance
          uri:
            url: "{{ base_url }}/objects?type=DigitalSpecimen&suffix=test_temp_ods_instance"
            method: POST
            url_username: admin
            url_password: "{{ cordra.admin_password }}"
            force_basic_auth: yes
            body_format: json
            body: >
              {
                "id": "{{ cordra.cordra_nsidr_server.handle_prefix }}/test_temp_ods_instance",
                "midslevel": 0,
                "institutionCode": ["CU"],
                "physicalSpecimenId": "test_physicalSpecimenId",
                "scientificName": "test_scientificName"
              }
            status_code: [200, 201]
            validate_certs: "{{ c_validation }}"
          register: create_ods_response

        - name: Check that an ID was created for the test object
          assert:
            that: "'id' in create_ods_response.json"
            
        - name:  Wait 6 seconds for the provenance life cycle hooks to be activated
          pause:
            seconds: 6

        - name: Update example Open Digital Specimen
          uri:
            url: "{{ base_url }}/objects/{{ create_ods_response.json.id }}"
            method: PUT
            url_username: admin
            url_password: "{{ cordra.admin_password }}"
            force_basic_auth: yes
            body_format: json
            body: >
              {
                "id": "{{ cordra.cordra_nsidr_server.handle_prefix }}/test_temp_ods_instance",
                "midslevel": 0,
                "institutionCode": ["CU"],
                "physicalSpecimenId": "test_changed_physicalSpecimenId",
                "scientificName": "test_scientificName"
              }
            status_code: 200
            validate_certs: "{{ c_validation }}"

        - name:  Wait 6 seconds for the provenance life cycle hooks to be activated
          pause:
            seconds: 6

        # Note: this method currently does not require authentication, however
        # credentials are passes here in case this is changed in the future
        - name: Retrieve provenance records for created DS
          uri:
            url: "{{ base_url }}/call/?objectId={{ create_ods_response.json.id }}&method=getProvenanceRecords"
            method: POST
            url_username: admin
            url_password: "{{ cordra.admin_password }}"
            force_basic_auth: yes
            status_code: 200
            validate_certs: "{{ c_validation }}"
          register: get_provenance_response

        - name: Check that provenance was documented correctly via doec
          assert:
            that:
              - "'provenanceRecords' in get_provenance_response.json"
              - "{{ get_provenance_response.json.provenanceRecords|length }} == 2"
              - "item.type == 'EventProvenanceRecord'"
              - "item.attributes.content.eventTypeId in ['{{ prefix }}/EventTypeInsert', '{{ prefix }}/EventTypeUpdate']"
          loop: "{{ get_provenance_response.json.provenanceRecords }}"
          vars:
            prefix: "{{ cordra.cordra_prov_server.handle_prefix }}"

        - name: Delete the example Open Digital Specimen instance
          uri:
            url: "{{ base_url }}/objects/{{ create_ods_response.json.id }}"
            method: DELETE
            url_username: admin
            url_password: "{{ cordra.admin_password }}"
            force_basic_auth: yes
            status_code: 200
            validate_certs: "{{ c_validation }}"

        - name:  Wait 6 seconds for the provenance life cycle hooks to be activated
          pause:
            seconds: 6

        # After successfull tests until here the provenance records of this ID
        # must be deleted from cordra_prov, otherwise future tests will fail
        - name: Search all provenance records
          uri:
            url: "{{ base_url_prov }}/objects?query=type:\"EventProvenanceRecord\"%20AND%20/entityId:\"{{ create_ods_response.json.id }}\""
            url_username: admin
            url_password: "{{ cordra.admin_password }}"
            force_basic_auth: yes
            status_code: 200
            validate_certs: "{{ c_validation }}"
          register: provenance_search_response

        - name: Check that search results have expected length
          assert:
            that:
              - "{{ provenance_search_response.json.results|length }} == 3"

        - name: Delete all provenance records of the example instance
          uri:
            url: "{{ base_url_prov }}/objects/{{ item.id }}"
            method: DELETE
            url_username: admin
            url_password: "{{ cordra.admin_password }}"
            force_basic_auth: yes
            status_code: 200
            validate_certs: "{{ c_validation }}"
          loop: "{{ provenance_search_response.json.results }}"

      rescue:
        - debug:
            msg: "ERROR in test ODStype1802 on {{ inventory_hostname }}"
      always:
        - debug:
            msg: "FINISHED test ODStype1802 on {{ inventory_hostname }}, created: {{ create_ods_response }}"
