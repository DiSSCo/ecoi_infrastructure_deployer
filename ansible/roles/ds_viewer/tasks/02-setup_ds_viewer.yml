---
- name: Setup DS Viewer on {{ inventory_hostname }}
  block:
    - name: Ansible check ds_viewer application exists on {{ inventory_hostname }}
      stat:
        path: "{{ ds_viewer.dir }}"
      register: ds_app_dir

    - name: "Download DS Viewer on {{ inventory_hostname }}"
      git:
        repo: "{{ ds_viewer.distribution_url }}"
        dest: "{{ ds_viewer.dir }}"
      when: not ds_app_dir.stat.exists

    - name: "Copy rbenv vars file on {{ inventory_hostname }}"
      copy:
        src: vars.txt
        dest: '{{ ds_viewer.dir }}/.rbenv-vars'
        owner: "{{ server.user }}"
        group: "{{ server.user }}"
      when: not ds_app_dir.stat.exists

    - name: "Recursively change ownership of directory on {{ inventory_hostname }}"
      file:
        path: "{{ ds_viewer.dir }}"
        state: directory
        recurse: yes
        owner: "{{ server.user }}"
        group: "{{ server.group }}"
      when: not ds_app_dir.stat.exists

    - name: "Edit application.rb to point to desired Cordra instance on {{ inventory_hostname }}"
      lineinfile:
        path: "{{ ds_viewer.dir }}/config/application.rb"
        line: "{{ item.line }}"
        regexp: "{{ item.regexp }}"
      with_items:
        - { line: '    config.cordra_server_url = "https://{{ cordra.cordra_nsidr_server.host_ip }}:{{ cordra.https_port }}"', regexp: 'config.cordra_server_url' }
        - { line: '    config.cordra_server_prefix = "{{ cordra.cordra_nsidr_server.handle_prefix }}"', regexp: 'config.cordra_server_prefix' }
      when: not rbenv_dir.stat.exists

    - name: "Update ruby dependencies bundle on {{ inventory_hostname }}"
      command: "{{ server.apps_dir}}/rbenvInit.sh bundle update mimemagic"
      args:
        chdir: "{{ ds_viewer.dir }}"
      become_user: "{{ server.user }}"
      when: not ds_app_dir.stat.exists

    - name: "Bundle install on {{ inventory_hostname }}"
      command: "{{ server.apps_dir}}/rbenvInit.sh bundle install"
      args:
        chdir: "{{ ds_viewer.dir }}"
      become_user: "{{ server.user }}"
      when: not ds_app_dir.stat.exists

    - name: "rbenv rehash on {{ inventory_hostname }}"
      command: "{{ server.apps_dir}}/rbenvInit.sh rbenv rehash"
      become_user: "{{ server.user }}"
      when: not ds_app_dir.stat.exists

    - name: "Compile assests on {{ inventory_hostname }}"
      command: "{{ server.apps_dir}}/rbenvInit.sh rails assets:precompile"
      args:
        chdir: "{{ ds_viewer.dir }}"
      environment:
        RAILS_ENV: "production"
      become_user: "{{ server.user }}"
      when: not ds_app_dir.stat.exists

    - name: Config Ds Viewer service on {{ inventory_hostname }}
      template:
        src: systemd/ds_viewer.service.j2
        dest: /etc/systemd/system/ds_viewer.service
      when: not ds_app_dir.stat.exists
      register: ds_viewer_service

    - name: Force systemd to reload configs on {{ inventory_hostname }}
      systemd:
        daemon_reload: yes
      when: ds_viewer_service.changed

    - name: Enable/Start Ds Viewer service on {{ inventory_hostname }}
      systemd:
        name: ds_viewer.service
        enabled: yes
        state: started
      when: ds_viewer_service.changed


  become: true
  become_user: root
  rescue:
    - debug:
        msg: "ERROR in Setup Grafana on {{ inventory_hostname }}"
  always:
    - debug:
        msg: "Setup Grafana FINISHED on {{ inventory_hostname }}"
  tags: ["install_software"]
