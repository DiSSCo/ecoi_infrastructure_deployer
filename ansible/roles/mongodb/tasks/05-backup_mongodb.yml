---
- name: Setup Backup Mongodb on {{ inventory_hostname }}
  block:
    # Download MongoDB distribution and unzip in /opt as zip has folder mongodb-x.x.x
    - name: Download AWS cli on {{ inventory_hostname }}
      unarchive:
        src: "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip"
        remote_src: yes
        dest: "{{ '/home/' + server.user}}"
        creates: "{{ '/home/' + server.user + '/aws'}}"
      register: aws_cli_download

    - name: Install AWS cli on {{ inventory_hostname }}
      shell:
        cmd: "./install"
        chdir: "{{ '/home/' + server.user + '/aws'}}"
        creates: "/usr/local/bin/aws"
      when: aws_cli_download.changed

    - name: Create aws config directory
      file:
        path: "{{ '/home/' + server.user + '/.aws' }}"
        owner: "{{ server.user }}"
        group: "{{ server.group }}"
        state: directory
      when: aws_cli_download.changed

    - name: Copy AWS CLI config files on {{ inventory_hostname }}
      template:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        owner: "{{ server.user }}"
        group: "{{ server.group }}"
      with_items:
        - { src: 'mongodb/backup/s3/config.j2', dest: '{{ "/home/" + server.user + "/.aws/config"}}' }
        - { src: 'mongodb/backup/s3/credentials.j2', dest: '{{ "/home/" + server.user + "/.aws/credentials"}}' }
      when: aws_cli_download.changed

    - name: Create mongodb_backup directory if it does not exist
      file:
        path: "{{ server.apps_dir }}/mongodb_backup"
        owner: "{{ server.user }}"
        group: "{{ server.group }}"
        state: directory
      when: aws_cli_download.changed

    - name: Copy mongodb-s3-backup script on {{ inventory_hostname }}
      template:
        src: mongodb/backup/mongodb-s3-backup.sh.j2
        dest: "{{ server.apps_dir }}/mongodb_backup/mongodb-s3-{{ item.interval_name }}-backup.sh"
        owner: "{{ server.user }}"
        group: "{{ server.group }}"
        mode: a+x
      vars:
        interval_name: "{{ item.interval_name }}"
        storage_class: "{{ item.storage_class }}"
      loop:
        - { interval_name: 'daily', storage_class: '{{ mongodb.backup.s3.daily_backup_storage_class }}' }
        - { interval_name: 'monthly', storage_class: '{{ mongodb.backup.s3.monthly_backup_storage_class }}' }
        - { interval_name: 'yearly', storage_class: '{{ mongodb.backup.s3.yearly_backup_storage_class }}' }

    - name: Add cronjobs for automatic backup
      cron:
        name: mongodb_{{ item }}_backup
        special_time: "{{ item }}"
        job: "{{ server.apps_dir }}/mongodb_backup/mongodb-s3-{{ item }}-backup.sh > {{ server.apps_dir }}/mongodb_backup/mongodb-s3-backup.log"
      become_user: "{{ server.user }}"
      loop:
        - daily
        - monthly
        - yearly
      when: server.environment != 'test'

  become: true
  become_user: root
  rescue:
    - debug:
        msg: "ERROR in Setup backup Mongodb"
  always:
    - debug:
        msg: "Setup backup Mongodb FINISHED"
  tags: ["install_software"]
