---
- name: Setup Cordra on {{ inventory_hostname }}
  block:
    # Download cordra distribution and unzip in /opt as zip has folder cordra-x.x.x
    - name: Download and unarchive CORDRA on {{ inventory_hostname }}
      unarchive:
        src: "{{ cordra.distribution_url }}"
        remote_src: yes
        dest: "{{ server.apps_dir }}"
        creates: "{{ cordra.dir }}"
        owner: "{{ server.user }}"
        group: "{{ server.group }}"
      register: cordra_download

    - name: Create symbolic link between cordra-x.x.x and cordra directory on {{ inventory_hostname }}
      shell:
        cmd: find . -maxdepth 1 -type d -iname 'cordra-*' -exec ln -s {} "{{ cordra.dir }}" \;
        chdir: "{{ server.apps_dir }}"
        creates: "{{ cordra.dir }}"
      when: cordra_download.changed

    - name: Setup Cordra config files (config.json and repoInit.json) on {{ inventory_hostname }}
      template:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        owner: "{{ server.user }}"
        group: "{{ server.group }}"
      with_items:
        - { src: '{{ "cordra/config.json.j2" }}', dest: '{{ cordra.dir + "/data/config.json" }}' }
        - { src: '{{ "cordra/" + instance_type + "/repoInit.json.j2" }}', dest: '{{ cordra.dir + "/data/repoInit.json" }}' }
      when: cordra_download.changed

    - name: Create cordra/data/lib directory if it does not exist
      file:
        path: "{{ cordra.dir }}/data/lib"
        owner: "{{ server.user }}"
        group: "{{ server.group }}"
        state: directory
      when: cordra_download.changed and instance_type != 'cordra_prov_server'

    - name: Install DOEC library on {{ inventory_hostname }}
      get_url:
        url: "{{ cordra.doec_library_url }}"
        dest: "{{ cordra.dir }}/data/lib"
        owner: "{{ server.user }}"
        group: "{{ server.group }}"
      when: cordra_download.changed and instance_type != 'cordra_prov_server'

    - name: Copy doec_config properties on {{ inventory_hostname }}
      template:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        owner: "{{ server.user }}"
        group: "{{ server.group }}"
      with_items:
        - { src: '{{ "cordra/" + instance_type + "/doec_config.properties.j2" }}', dest: '{{ cordra.dir + "/data/doec_config.properties" }}' }
      when: cordra_download.changed and instance_type != 'cordra_prov_server'

    - name: Import SSL certificate from search_engine_server to the default java cacerts keystore on {{ inventory_hostname }}
      java_cert:
        cert_alias: search_engine_server
        cert_path: "{{ server.apps_dir + '/certs/search_engine_server.crt' }}"
        keystore_path: "{{ java_home + '/jre/lib/security/cacerts' }}"
        keystore_pass: changeit
        state: present
      when: cordra_download.changed

    - name: Copy Cordra handle keys on {{ inventory_hostname }}
      copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        owner: "{{ server.user }}"
        group: "{{ server.group }}"
      with_items:
        - { src: '{{ "cordra/" + instance_type + "/cordra_privatekey" }}', dest: '{{ cordra.dir + "/data/privatekey" }}' }
        - { src: '{{ "cordra/" + instance_type + "/cordra_publickey" }}', dest: '{{ cordra.dir + "/data/publickey" }}' }
      when: cordra_download.changed and instance_type != 'cordra_prov_server'

    - name: Set up file with doip commands to load initial data on {{ inventory_hostname }}
      template:
        src: "{{ 'cordra/doip_load_initial_data.txt.j2' }}"
        dest: "{{ cordra.dir + '/doip_load_initial_data.txt' }}"
        owner: "{{ server.user }}"
        group: "{{ server.group }}"
      vars:
        digital_objects: "{{ lookup('template', 'cordra/'+instance_type+'/initial_data.json.j2') }}"
      when: cordra_download.changed

    - name: Download and unarchive Handle tools on {{ inventory_hostname }}
      unarchive:
        src: "{{ handle_tool.distribution_url }}"
        remote_src: yes
        dest: "{{ server.apps_dir }}"
        creates: "{{ handle_tool.dir }}"
        owner: "{{ server.user }}"
        group: "{{ server.group }}"
      when: cordra_download.changed

    - name: Create symbolic link between handle-x.x.x and handle directory on {{ inventory_hostname }}
      shell:
        cmd: find . -maxdepth 1 -type d -iname 'handle-*' -exec ln -s {} "{{ handle_tool.dir }}" \;
        chdir: "{{ server.apps_dir }}"
        creates: "{{ handle_tool.dir }}"
      when: cordra_download.changed

    - name: Get all handle ids to be deleted in the handle server before starting Cordra on {{ inventory_hostname }}
      shell:
        cmd: ./bin/hdl-list {{ cordra[instance_type].handle_prefix }}/repo 300 {{ cordra.dir }}/data/privatekey {{ cordra[instance_type].handle_prefix }} > {{ cordra.dir }}/hdl-list-to-delete.txt
        #cmd: |
        #  grep -oP '"id": "\K{{ cordra['cordra_nsidr_server'].handle_prefix }}/[\w-.!]+' {{ cordra.dir }}/doip_load_initial_data.txt > {{ cordra.dir }}/hdl-list-to-delete.txt
        chdir: "{{ handle_tool.dir }}"
      when: cordra_download.changed and cordra[instance_type].base_uri!=""

    - name: Delete handle ids from handle server before starting Cordra on {{ inventory_hostname }}
      shell:
        cmd: ./bin/hdl-delete {{ cordra[instance_type].handle_prefix }}/repo 300 {{ cordra.dir }}/data/privatekey {{ cordra.dir }}/hdl-list-to-delete.txt
        chdir: "{{ handle_tool.dir }}"
      when: cordra_download.changed and cordra[instance_type].base_uri!=""

    - name: Copy delete_handle_ids_from_handle_server.sh script on {{ inventory_hostname }}
      template:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        owner: "{{ server.user }}"
        group: "{{ server.group }}"
        mode: a+x
      with_items:
        - { src: 'cordra/delete_handle_ids_from_handle_server.sh.j2', dest: '{{ cordra.dir }}/bin' }
      when: cordra_download.changed

#    - name: Start Cordra on {{ inventory_hostname }}
#      shell:
#        cmd: nohup ./startup >> ./cordra.log 2>&1 &
#        chdir: "{{ cordra.dir }}"
#      become_user: "{{ server.user }}"
#      when: cordra_download.changed
#      register: cordra_up
#
#    - name: Wait for http cordra port to become open on the host, don't start checking for 5 seconds on {{ inventory_hostname }}
#      wait_for:
#        port: "{{ cordra.http_internal_port }}"
#        delay: 5
#        timeout: 300
#        state: started
#        msg: "CORDRA HTTP PORT is not Listening"
#      when: cordra_download.changed

    - name: Config Cordra service on {{ inventory_hostname }}
      template:
        src: systemd/cordra.service.j2
        dest: /etc/systemd/system/cordra.service
      when: cordra_download.changed
      register: cordra_service

    - name: Force systemd to reload configs on {{ inventory_hostname }}
      systemd:
        daemon_reload: yes
      when: cordra_service.changed

    - name: Enable/Start Cordra service on {{ inventory_hostname }}
      systemd:
        name: cordra.service
        enabled: yes
        state: started
      when: cordra_service.changed

    - pause:
        minutes: 1

    # Restart Cordra as initial start doesn't have the doip service
    - name: Restart Cordra service on {{ inventory_hostname }}
      systemd:
        name: cordra.service
        state: restarted
      when: cordra_service.changed

    - pause:
        minutes: 1

    # import the inital data (need to do it twice as the first import only insert the first object)
    - name: Run DOIP commands to loading intial data on {{ inventory_hostname }}
      shell:
        cmd: "{{item}}"
        chdir: "{{ cordra.dir }}"
        warn: false
      with_items:
        - "openssl s_client -connect {{ cordra[instance_type].host_ip }}:{{ cordra.doip_port }} < doip_load_initial_data.txt"
        - "openssl s_client -connect {{ cordra[instance_type].host_ip }}:{{ cordra.doip_port }} -ign_eof < doip_load_initial_data.txt &"
        - "sleep 60"
         - "rm doip_load_initial_data.txt"
      become_user: "{{ server.user }}"
      when: cordra_service.changed

  become: true
  become_user: root
  rescue:
    - debug:
        msg: "ERROR in Setup Cordra on {{ inventory_hostname }}"
  always:
    - debug:
        msg: "Setup Cordra FINISHED on {{ inventory_hostname }}"
  tags: ["install_software"]