[
  {
    "id": "{{ cordra[instance_type].handle_prefix }}/DigitalSpecimen_schema",
    "type": "Schema",
    "attributes": {
      "content": {
        "name": "DigitalSpecimen",
        "description": "Schema for digital specimens",
        "schema": {
          "definitions": {
            "previewInResultsTrue": {
              "cordra": {
                "preview": {
                  "showInPreview": true
                }
              }
            },
            "previewInResultsFalse": {
              "cordra": {
                "preview": {
                  "showInPreview": false
                }
              }
            }
          },
          "$schema": "http://json-schema.org/schema#",
          "$id": "http://nsidr.org/schemas/DigitalSpecimen",
          "type": "object",
          "title": "DigitalSpecimen",
          "required": [
            "id",
            "midslevel",
            "scientificName",
            "physicalSpecimenId",
            "institutionCode"
          ],
          "properties": {
            "id": {
              "type": "string",
              "cordra": {
                "type": {
                  "autoGeneratedField": "handle",
                  "prependHandleMintingConfigPrefix": true
                },
                "preview": {
                  "showInPreview": true
                }
              }
            },
            "creationdatetime": {
              "type": "string",
              "cordra": {
                "type": {
                  "autoGeneratedField": "creationDate"
                }
              }
            },
            "creator": {
              "type": "string",
              "cordra": {
                "type": {
                  "autoGeneratedField": "createdBy"
                }
              }
            },
            "midslevel": {
              "type": "integer",
              "minimum": 0,
              "maximum": 3
            },
            "scientificName": {
              "type": "string",
              "maxLength": 128,
              "title": "Scientific name",
              "cordra": {
                "preview": {
                  "showInPreview": true,
                  "isPrimary": true
                }
              }
            },
            "authorReference": {
              "type": "string",
              "format": "uri",
              "title": "Author reference",
              "$ref": "#/definitions/previewInResultsFalse"
            },
            "commonName": {
              "type": "string",
              "maxLength": 128,
              "title": "Common name",
              "$ref": "#/definitions/previewInResultsTrue"
            },
            "country": {
              "type": "string",
              "title": "Country",
              "$ref": "#/definitions/previewInResultsTrue"
            },
            "locality": {
              "type": "string",
              "title": "Locality",
              "$ref": "#/definitions/previewInResultsTrue"
            },
            "localityReference": {
              "type": "string",
              "title": "Locality reference",
              "format": "uri",
              "$ref": "#/definitions/previewInResultsFalse"
            },
            "decimalLatLon": {
              "type": "array",
              "properties": {
                "latitude": {
                  "type": "number",
                  "minimum": -90,
                  "maximum": 90
                },
                "longitude": {
                  "type": "number",
                  "minimum": -180,
                  "maximum": 180
                }
              },
              "title": "Coordinates (decimal lat/lon)",
              "$ref": "#/definitions/previewInResultsFalse"
            },
            "recordedBy": {
              "type": "string",
              "title": "Recorded by (collector)",
              "$ref": "#/definitions/previewInResultsTrue"
            },
            "collectorReference": {
              "type": "string",
              "format": "uri",
              "title": "Collector reference",
              "$ref": "#/definitions/previewInResultsFalse"
            },
            "collectionDate": {
              "type": "string",
              "title": "Collection date",
              "$ref": "#/definitions/previewInResultsTrue"
            },
            "catalogNumber": {
              "type": "string",
              "title": "Catalog number",
              "$ref": "#/definitions/previewInResultsFalse"
            },
            "otherCatalogNumbers": {
              "type": "string",
              "title": "Other catalog numbers",
              "$ref": "#/definitions/previewInResultsFalse"
            },
            "institutionCode": {
              "type": "string",
              "title": "Institution code (GRSciColl)",
              "$ref": "#/definitions/previewInResultsTrue"
            },
            "collectionCode": {
              "type": "string",
              "title": "Collection code (GRSciColl)",
              "$ref": "#/definitions/previewInResultsFalse"
            },
            "stableIdentifier": {
              "type": "string",
              "format": "uri",
              "title": "CETAF stable identifier (uri)",
              "$ref": "#/definitions/previewInResultsFalse"
            },
            "physicalSpecimenId": {
              "type": "string",
              "title": "Physical specimen identifier",
              "$ref": "#/definitions/previewInResultsFalse"
            },
            "interpretations": {
              "type": "string",
              "format": "uri",
              "title": "Interpretations",
              "$ref": "#/definitions/previewInResultsFalse"
            },
            "annotations": {
              "type": "string",
              "format": "uri",
              "title": "Annotations",
              "$ref": "#/definitions/previewInResultsFalse"
            },
            "other Keywords": {
              "type": "string",
              "title": "Other keywords",
              "$ref": "#/definitions/previewInResultsFalse"
            },
            "gbifId": {
              "type": "string",
              "maxLength": 128,
              "format": "uri",
              "title": "GBIF occurrence identifier (gbifId)",
              "$ref": "#/definitions/previewInResultsFalse"
            },
            "catOfLifeReference": {
              "type": "string",
              "maxLength": 128,
              "format": "uri",
              "title": "Catalogue of Life",
              "$ref": "#/definitions/previewInResultsFalse"
            },
            "literatureReference": {
              "type": "string",
              "maxLength": 128,
              "format": "handle",
              "title": "Literature reference (DOI)",
              "$ref": "#/definitions/previewInResultsFalse"
            },
            "publications": {
              "type": "string",
              "maxLength": 128,
              "format": "uri",
              "title": "Literature reference (url)",
              "$ref": "#/definitions/previewInResultsFalse"
            },
            "treatmentbank": {
              "type": "string",
              "maxLength": 128,
              "format": "uri",
              "title": "TreatmentBank",
              "$ref": "#/definitions/previewInResultsFalse"
            },
            "wikipedia": {
              "type": "string",
              "maxLength": 128,
              "format": "uri",
              "title": "Wikipedia",
              "$ref": "#/definitions/previewInResultsFalse"
            },
            "imageID": {
              "type": "string",
              "maxLength": 32,
              "title": "Image identifier",
              "$ref": "#/definitions/previewInResultsFalse"
            },
            "availableImages": {
              "$id": "#/properties/availableImages",
              "type": "array",
              "title": "Available images",
              "items": {
                "$id": "#/properties/availableImages/image",
                "type": "array",
                "title": "Image",
                "items": [
                  {
                    "type": "string",
                    "title": "Creator"
                  },
                  {
                    "type": "string",
                    "title": "Format"
                  },
                  {
                    "type": "string",
                    "title": "Resolution"
                  },
                  {
                    "type": "string",
                    "title": "Rights holder"
                  },
                  {
                    "type": "string",
                    "title": "Rights"
                  },
                  {
                    "type": "string",
                    "format": "uri",
                    "title": "Image"
                  }
                ]
              },
              "$ref": "#/definitions/previewInResultsFalse"
            },
            "bhlPages": {
              "type": "array",
              "items": {
                "type": "string",
                "maxLength": 128,
                "format": "uri",
                "title": "BHL page"
              },
              "title": "Biodiversity Heritage Library pages",
              "$ref": "#/definitions/previewInResultsFalse"
            },
            "enaBiosample": {
              "type": "string",
              "maxLength": 128,
              "format": "uri",
              "title": "Biosample (European Nucleotide Archive)",
              "$ref": "#/definitions/previewInResultsFalse"
            },
            "enaSequence": {
              "type": "string",
              "maxLength": 128,
              "format": "uri",
              "title": "Sequence data (European Nucleotide Archive)",
              "$ref": "#/definitions/previewInResultsFalse"
            },
            "comment": {
              "type": "string",
              "maxlength": 4000,
              "title": "Comments (max 4000 characters)",
              "$ref": "#/definitions/previewInResultsFalse"
            }
          },
          "links": [
            {
              "rel": "self",
              "href": "#objects/{id}"
            }
          ]
        },
        "javascript": "var cordra = require('cordra');\n\nexports.beforeSchemaValidation = beforeSchemaValidation;\nexports.objectForIndexing = objectForIndexing;\nexports.onObjectResolution = onObjectResolution;\nexports.beforeDelete = beforeDelete;\n\nexports.methods = {};\nexports.methods.getVersionAtGivenTime = getVersionAtGivenTime;\nexports.methods.publishVersion = publishVersion;\nexports.methods.getProvenanceRecords = getProvenanceRecords;\nexports.methods.getObjectAtGivenTime = getObjectAtGivenTime;\nexports.methods.processEvent = processEvent;\n\n\nfunction getDigitalObjectEventController(){\n   var dataDir = java.lang.System.getProperty(\"cordra.data\");\n   var doecConfigFilePath = java.nio.file.Paths.get(dataDir).resolve(\"doec_config.properties\");\n   \n   var DigitalObjectEventController = Java.type(\"eu.dissco.doec.DigitalObjectEventController\");\n   var doec = new DigitalObjectEventController(doecConfigFilePath);\n   \n   return doec;\n}\n\nfunction beforeSchemaValidation(object, context) {   \n   var doec = getDigitalObjectEventController();\n   if (context.isNew) {\n       doec.processCreateEvent(JSON.stringify(object),JSON.stringify(context));    \n   } else {    \n       var originalObject = cordra.get(context.objectId);\n       doec.processUpdateEvent(JSON.stringify(originalObject),JSON.stringify(object),JSON.stringify(context));    \n   }    \n   return object;\n}\n\nfunction objectForIndexing(object, context) {\n   /* Insert code here */\n   return object;\n}\n\nfunction onObjectResolution(object, context) {\n   var doec = getDigitalObjectEventController();\n   //doec.processRetrieveEvent(JSON.stringify(object),JSON.stringify(context));    \n   return object;\n}\n\nfunction beforeDelete(object, context) {\n   var doec = getDigitalObjectEventController();\n   doec.processDeleteEvent(JSON.stringify(object),JSON.stringify(context));   \n}\n\n/*\nFunction to process a custom event over a digital object\nFor example, to process the event DepositInMuseum for the Digital Specimen 20.5000.1025/testDS\nthe doip call should look like:\n{\n  \"targetId\": \"20.5000.1025/testDS\",\n  \"operationId\": \"processEvent\",\n  \"authentication\": { \"username\": \"YOUR_USERNAME\", \"password\": \"YOUR_PASSWORD\" },\n  \"input\": {\n    \"eventType\":\"DepositInMuseum\",\n    \"agentId\":\"20.5000.1025/d298a8c18cb62ee602b8\",\n    \"role\":\"Scientist\",\n    \"timestamp\": \"2019-12-02T18:42:59.361Z\",\n    \"description\":\"Specimen deposit in museum for exhibition\",\n    \"data\":{\n        \"museumId\":\"20.5000.1025/2fd4b4e4525def2122bb\"\n    }\n  }\n}\n#\n#\n*/\nfunction processEvent(object, context) {   \n   var doec = getDigitalObjectEventController();\n   var event = JSON.stringify(context.params);\n   doec.processCustomEvent(event,object.id);\n   return object;\n}\n\n\n/*\nFunction that get the published version of a digital object at a given time\nFor example, to get the version of the Digital Specimen 20.5000.1025/testDS\nat 2019-12-02T18:42:59.361Z the doip call should look like:\n{\n  \"targetId\": \"20.5000.1025/testDS\",\n  \"operationId\": \"getVersionAtGivenTime\",\n  \"authentication\": { \"username\": \"YOUR_USERNAME\", \"password\": \"YOUR_PASSWORD\" },\n  \"input\": {\n    \"timestamp\": \"2019-12-02T18:42:59.361Z\"\n  }\n}\n#\n#\n*/\nfunction getVersionAtGivenTime(object, context) {   \n   var doec = getDigitalObjectEventController();\n   var timestamp = context.params.timestamp;\n   var version = doec.getVersionOfObjectAtGivenTime(object.id,timestamp);\n   return version;    \n}    \n\n\n/*\nFunction that recreates the the digital object at a given time by lookig at the provenance record\nFor example, to get the Digital Specimen 20.5000.1025/testDS \nat 2019-12-02T18:42:59.361Z the doip call should look like:\n{\n  \"targetId\": \"20.5000.1025/testDS\",\n  \"operationId\": \"getObjectAtGivenTime\",\n  \"authentication\": { \"username\": \"YOUR_USERNAME\", \"password\": \"YOUR_PASSWORD\" },\n  \"input\": {\n    \"timestamp\": \"2019-12-02T18:42:59.361Z\"\n  }\n}\n#\n#\n*/\nfunction getObjectAtGivenTime(object, context) {   \n   var doec = getDigitalObjectEventController();\n   var timestamp = context.params.timestamp;\n   var version = doec.getObjectAtGivenTime(object.id,timestamp);\n   return version;    \n}  \n\n/*\nFunction that gets the list of provenance records of a given object\nFor example, to get provenance records for the Digital Specimen 20.5000.1025/testDS, the doip call should look like:\n{\n  \"targetId\": \"20.5000.1025/testDS\",\n  \"operationId\": \"getProvenanceRecords\",\n  \"authentication\": { \"username\": \"francisco\", \"password\": \"fran1234\" }\n}\n#\n#\n*/\nfunction getProvenanceRecords(object, context) {\n   var doec = getDigitalObjectEventController();\n   var provenanceRecords = doec.getProvenanceRecordsForObject(object.id);\n   object.provenanceRecords=JSON.parse(provenanceRecords);\n   return object;    \n}\n\n/*\nFunction that publishes a version of the digital object and returns the id\nFor example, to publish the current version of the Digital Specimen 20.5000.1025/testDS, the doip call should look like:\n{\n  \"targetId\": \"20.5000.1025/testDS\",\n  \"operationId\": \"publishVersion\",\n  \"authentication\": { \"username\": \"francisco\", \"password\": \"fran1234\" }\n}\n#\n#\n*/\nfunction publishVersion(object, context) {   \n   var doec = getDigitalObjectEventController();\n   var versionId = doec.publishVersion(object.id);\n   return versionId;    \n}   "
      }
    },
    "elements": []
  },
  {
    "id": "{{ cordra[instance_type].handle_prefix }}/Role_schema",
    "type": "Schema",
    "attributes": {
      "content": {
        "name": "Role",
        "schema": {
          "type": "object",
          "title": "Role",
          "required": [
            "id"
          ],
          "properties": {
            "id": {
              "type": "string",
              "cordra": {
                "type": {
                  "autoGeneratedField": "handle"
                }
              }
            },
            "name": {
              "type": "string",
              "title": "Name",
              "cordra": {
                "preview": {
                  "showInPreview": true,
                  "isPrimary": true
                }
              }
            },
            "description": {
              "type": "string",
              "format": "textarea",
              "title": "Description",
              "cordra": {
                "preview": {
                  "showInPreview": true
                }
              }
            }
          }
        }
      }
    },
    "elements": []
  },
  {
    "id": "{{ cordra[instance_type].handle_prefix }}/Museum_schema",
    "type": "Schema",
    "attributes": {
      "content": {
        "name": "Museum",
        "schema": {
          "type": "object",
          "title": "Museum",
          "required": [
            "id"
          ],
          "properties": {
            "id": {
              "type": "string",
              "cordra": {
                "type": {
                  "autoGeneratedField": "handle"
                }
              }
            },
            "name": {
              "type": "string",
              "title": "Name",
              "cordra": {
                "preview": {
                  "showInPreview": true,
                  "isPrimary": true
                }
              }
            },
            "description": {
              "type": "string",
              "format": "textarea",
              "title": "Description",
              "cordra": {
                "preview": {
                  "showInPreview": true
                }
              }
            }
          }
        }
      }
    },
    "elements": []
  },
  {
    "id": "{{ cordra[instance_type].handle_prefix }}/Scientist",
    "type": "Role",
    "attributes": {
      "content": {
        "name": "Scientist",
        "description": "Scientist"
      }
    },
    "elements": []
  },
  {
    "id": "{{ cordra[instance_type].handle_prefix }}/NHM_London",
    "type": "Museum",
    "attributes": {
      "content": {
        "name": "National History Museum London",
        "description": "National History Museum London"
      }
    },
    "elements": []
  },
  {
    "id": "{{ cordra[instance_type].handle_prefix }}/testDS",
    "type": "DigitalSpecimen",
    "attributes": {
      "content": {
        "physicalSpecimenId": "testDS",
        "institutionCode": "CU",
        "midslevel": 0,
        "scientificName": "Test DS"
      }
    },
    "elements": []
  },
  {
    "id": "{{ cordra[instance_type].handle_prefix }}/ODStypeV0.1",
    "type": "Schema",
    "attributes": {
      "content": {
        "name": "ODStypeV0.1",
        "description": "Schema for open digital specimens created in September 2021, first version with semantic validation",
        "schema": {
          "definitions": {
            "previewInResultsTrue": {
              "cordra": {
                "preview": {
                  "showInPreview": true
                }
              }
            },
            "previewInResultsFalse": {
              "cordra": {
                "preview": {
                  "showInPreview": false
                }
              }
            }
          },
          "$schema": "http://json-schema.org/draft-04/schema",
          "$id": "http://nsidr.org/schemas/ODStype0.1",
          "type": "object",
          "title": "ODStypeV0.1",
          "required": [
          "@context",
          "@graph"
          ],
          "examples": [
            {
              "@context": [
                {
                  "ods": "http://github.com/hardistyar/openDS/ods-ontology/terms/"
                }
              ],
              "@graph": [
                {
                  "@id": "https://doi.org/20.5000.1025/ae88bb3a666ec72dbc52",
                  "@type": "ods:DigitalSpecimen",
                  "ods:authoritative": [
                    {
                      "ods:midsLevel": 1,
                      "ods:curatedObjectID": "NHMUK010517563",
                      "ods:institution": "https://ror.org/039zvsn29",
                      "ods:institutionCode": "NHMUK",
                      "ods:materialType": "Dry - pinned",
                      "ods:name": "Elophila nymphaeata (Linnaeus, 1758)"
                    }
                  ],
                  "ods:images": [
                    {
                      "ods:imageURI": "https://example.org/7870917_5bb2274d436ebab560cb85b83ba21d89fa8bc065.jpg",
                      "ods:imageWidth": 400,
                      "ods:imageHeight": 280,
                      "ods:imageSizeUnit": "pixel",
                      "ods:colorSpace": "",
                      "ods:iccProfileName": "",
                      "ods:xResolution": 0,
                      "ods:yResolution": 0,
                      "ods.imageResolutionUnit": "pixel",
                      "ods:creator": ""
                    }
                  ]
                }
              ]
            }
          ],
          "properties": {
            "id": {
              "type": "string",
              "cordra": {
                "type": {
                  "autoGeneratedField": "handle",
                  "prependHandleMintingConfigPrefix": true
                },
                "preview": {
                  "showInPreview": true
                }
              }
            },
            "@context": {
              "$id": "#/properties/%40context",
              "type": "array",
              "title": "RDF @context",
              "required": [
                "ods"
              ],
              "properties": {
                "ods": {
                  "$id": "#/properties/%40context/properties/ods",
                  "type": "string",
                  "title": "The ods schema",
                  "enum": [
                    "http://github.com/hardistyar/openDS/ods-ontology/terms/"
                  ]
                }
              },
              "additionalProperties": true
            },
            "@graph": {
              "$id": "#/properties/%40graph",
              "type": "array",
              "title": "RDF @graph",
              "additionalItems": true
            }
          },
          "additionalProperties": false
        },
        "javascript": "// Nashorn JDK cannot use XmlHttpRequest, therefore we must use Java Http requests\n// see for reference: https://gist.github.com/billybong/a462152889b6616deb02\n\nvar cordra = require(\"cordra\");\n// internal microservice for rdf validation according to https://github.com/jgrieb/ODS_rdf_validator\nvar ODS_rdf_validator_url = \"http://127.0.0.1:3000/validate\"\nvar cordraBaseUri = cordra.get('design').content.handleMintingConfig.baseUri;\n// ensure that ends with a slash\nif (cordraBaseUri[cordraBaseUri.length - 1] !== '/'){\n    cordraBaseUri += '/'\n}\n\nexports.beforeSchemaValidation = beforeSchemaValidation;\nexports.afterCreateOrUpdate = afterCreateOrUpdate;\nexports.objectForIndexing = objectForIndexing;\nexports.onObjectResolution = onObjectResolution;\nexports.beforeDelete = beforeDelete;\n\nexports.methods = {};\nexports.methods.getVersionAtGivenTime = getVersionAtGivenTime;\nexports.methods.publishVersion = publishVersion;\nexports.methods.getProvenanceRecords = getProvenanceRecords;\nexports.methods.getObjectAtGivenTime = getObjectAtGivenTime;\nexports.methods.processEvent = processEvent;\n\n\nfunction getDigitalObjectEventController(){\n   var dataDir = java.lang.System.getProperty(\"cordra.data\");\n   var doecConfigFilePath = java.nio.file.Paths.get(dataDir).resolve(\"doec_config.properties\");\n   \n   var DigitalObjectEventController = Java.type(\"eu.dissco.doec.DigitalObjectEventController\");\n   var doec = new DigitalObjectEventController(doecConfigFilePath);\n   \n   return doec;\n}\n\nfunction afterCreateOrUpdate(object, context) {   \n   var doec = getDigitalObjectEventController();\n   if (context.isNew) {\n       doec.processCreateEvent(JSON.stringify(object),JSON.stringify(context));    \n   } else {    \n       var originalObject = cordra.get(context.objectId);\n       doec.processUpdateEvent(JSON.stringify(originalObject),JSON.stringify(object),JSON.stringify(context));    \n   }    \n   return object;\n}\n\nfunction objectForIndexing(object, context) {\n   /* Insert code here */\n   return object;\n}\n\nfunction onObjectResolution(object, context) {\n   var doec = getDigitalObjectEventController();\n   //doec.processRetrieveEvent(JSON.stringify(object),JSON.stringify(context));    \n   return object;\n}\n\nfunction beforeDelete(object, context) {\n   var doec = getDigitalObjectEventController();\n   doec.processDeleteEvent(JSON.stringify(object),JSON.stringify(context));   \n}\n\n/*\nFunction to process a custom event over a digital object\nFor example, to process the event DepositInMuseum for the Digital Specimen 20.5000.1025/testDS\nthe doip call should look like:\n{\n  \"targetId\": \"20.5000.1025/testDS\",\n  \"operationId\": \"processEvent\",\n  \"authentication\": { \"username\": \"YOUR_USERNAME\", \"password\": \"YOUR_PASSWORD\" },\n  \"input\": {\n    \"eventType\":\"DepositInMuseum\",\n    \"agentId\":\"20.5000.1025/d298a8c18cb62ee602b8\",\n    \"role\":\"Scientist\",\n    \"timestamp\": \"2019-12-02T18:42:59.361Z\",\n    \"description\":\"Specimen deposit in museum for exhibition\",\n    \"data\":{\n        \"museumId\":\"20.5000.1025/2fd4b4e4525def2122bb\"\n    }\n  }\n}\n#\n#\n*/\nfunction processEvent(object, context) {   \n   var doec = getDigitalObjectEventController();\n   var event = JSON.stringify(context.params);\n   doec.processCustomEvent(event,object.id);\n   return object;\n}\n\n\n/*\nFunction that get the published version of a digital object at a given time\nFor example, to get the version of the Digital Specimen 20.5000.1025/testDS\nat 2019-12-02T18:42:59.361Z the doip call should look like:\n{\n  \"targetId\": \"20.5000.1025/testDS\",\n  \"operationId\": \"getVersionAtGivenTime\",\n  \"authentication\": { \"username\": \"YOUR_USERNAME\", \"password\": \"YOUR_PASSWORD\" },\n  \"input\": {\n    \"timestamp\": \"2019-12-02T18:42:59.361Z\"\n  }\n}\n#\n#\n*/\nfunction getVersionAtGivenTime(object, context) {   \n   var doec = getDigitalObjectEventController();\n   var timestamp = context.params.timestamp;\n   var version = doec.getVersionOfObjectAtGivenTime(object.id,timestamp);\n   return version;    \n}    \n\n\n/*\nFunction that recreates the the digital object at a given time by lookig at the provenance record\nFor example, to get the Digital Specimen 20.5000.1025/testDS \nat 2019-12-02T18:42:59.361Z the doip call should look like:\n{\n  \"targetId\": \"20.5000.1025/testDS\",\n  \"operationId\": \"getObjectAtGivenTime\",\n  \"authentication\": { \"username\": \"YOUR_USERNAME\", \"password\": \"YOUR_PASSWORD\" },\n  \"input\": {\n    \"timestamp\": \"2019-12-02T18:42:59.361Z\"\n  }\n}\n#\n#\n*/\nfunction getObjectAtGivenTime(object, context) {   \n   var doec = getDigitalObjectEventController();\n   var timestamp = context.params.timestamp;\n   var version = doec.getObjectAtGivenTime(object.id,timestamp);\n   return version;    \n}  \n\n/*\nFunction that gets the list of provenance records of a given object\nFor example, to get provenance records for the Digital Specimen 20.5000.1025/testDS, the doip call should look like:\n{\n  \"targetId\": \"20.5000.1025/testDS\",\n  \"operationId\": \"getProvenanceRecords\",\n  \"authentication\": { \"username\": \"francisco\", \"password\": \"fran1234\" }\n}\n#\n#\n*/\nfunction getProvenanceRecords(object, context) {\n   var doec = getDigitalObjectEventController();\n   var provenanceRecords = doec.getProvenanceRecordsForObject(object.id);\n   object.provenanceRecords=JSON.parse(provenanceRecords);\n   return object;    \n}\n\n/*\nFunction that publishes a version of the digital object and returns the id\nFor example, to publish the current version of the Digital Specimen 20.5000.1025/testDS, the doip call should look like:\n{\n  \"targetId\": \"20.5000.1025/testDS\",\n  \"operationId\": \"publishVersion\",\n  \"authentication\": { \"username\": \"francisco\", \"password\": \"fran1234\" }\n}\n#\n#\n*/\nfunction publishVersion(object, context) {   \n   var doec = getDigitalObjectEventController();\n   var versionId = doec.publishVersion(object.id);\n   return versionId;    \n}\n\n\nfunction beforeSchemaValidation(object, context) {\n    var dataToBeValidated = JSON.stringify({\n        \"content\": object.content\n    });\n    var con = new java.net.URL(ODS_rdf_validator_url).openConnection();\n    con.setConnectTimeout(10000); // 10 seconds\n    con.setReadTimeout(10000); // 10 seconds\n    var response = {};\n    try {\n    write(con, dataToBeValidated);\n    response = JSON.parse(read(con.inputStream));\n    } catch (e){\n        console.log(\"RDF validation error\", e);\n    }\n    if(con.responseCode === 200 && response.success){\n        if(response.result[0].status === \"conformant\"){\n            return object;   \n        } else {\n            const customResponse = {\n                message: \"RDF is not conformant to ODS schema\",\n                error: response.result[0]\n            };\n            throw new cordra.CordraError(customResponse);\n        }\n    } else {\n        throw(response.msg || \"An error occurred during validation\");\n    }\n}\n\nfunction read(inputStream){\n    var inReader = new java.io.BufferedReader(new java.io.InputStreamReader(inputStream));\n    var inputLine;\n    var response = new java.lang.StringBuffer();\n\n    while ((inputLine = inReader.readLine()) !== null) {\n           response.append(inputLine);\n    }\n    inReader.close();\n    return response.toString();\n}\n\nfunction write(con, data){\n    con.requestMethod = \"POST\";\n    con.setRequestProperty( \"Content-Type\", \"application/json; charset=utf-8\");\n    con.doOutput=true;\n    var wr = new java.io.DataOutputStream(con.outputStream);\n    wr.writeBytes(data);\n    wr.flush();\n    wr.close();\n}"
      }
    }
  },
  {
    "id": "{{ cordra[instance_type].handle_prefix }}/{{ rdf_validator.shex_schema_document_id }}",
    "type": "Document",
    "attributes": {
      "content": {
        "name": "{{ rdf_validator.shex_schema_document_id }}"
      },
      "acl": {
        "writers": [
          "{{ cordra[instance_type].handle_prefix }}/shexSchemaUploader"
        ]
      }
    }
  }
]
