---
- name: Setup Grafana on {{ inventory_hostname }}
  block:
    # Download Grafana distribution and unzip in /opt as zip has folder grafana-x.x.x
    - name: Download and unarchive Grafana on {{ inventory_hostname }}
      unarchive:
        src: "{{ grafana.distribution_url }}"
        remote_src: yes
        dest: "{{ server.apps_dir }}"
        creates: "{{ grafana.dir }}"
        owner: "{{ server.user }}"
        group: "{{ server.group }}"
      register: grafana_download

    - name: Fix permissions to grafana dir on {{ inventory_hostname }}
      shell:
        cmd: chown -R "{{ server.user }}":"{{ server.group }}" "{{ grafana.dir }}"-*
        warn: false
      when: grafana_download.changed

    - name: Create simbolic link between grafana-x.x.x and grafana directory on {{ inventory_hostname }}
      shell:
        cmd: find . -maxdepth 1 -type d -iname 'grafana-*' -exec ln -s {} "{{ grafana.dir }}" \;
        chdir: "{{ server.apps_dir }}"
        creates: "{{ grafana.dir }}"
      when: grafana_download.changed

    - name: Persist installed grafana version in file for update control
      copy:
        dest: "{{ grafana.dir + server.apps_version_file_suffix }}"
        content: "{{ grafana_version }}"
        force: no

    - name: Config Grafana installation on {{ inventory_hostname }}
      template:
        src: "grafana/grafana.ini.j2"
        dest: "{{ grafana.dir + '/conf/grafana.ini'}}"
        owner: "{{ server.user }}"
        group: "{{ server.group }}"
      when: grafana_download.changed

    - name: Config Grafana service on {{ inventory_hostname }}
      template:
        src: systemd/grafana.service.j2
        dest: /etc/systemd/system/grafana.service
      when: grafana_download.changed

    - name: Force systemd to reload configs on {{ inventory_hostname }}
      systemd:
        daemon_reload: yes
      when: grafana_download.changed

    - name: Enable/Start Grafana service on {{ inventory_hostname }}
      systemd:
        name: grafana.service
        enabled: yes
        state: started
      when: grafana_download.changed

    - name: Create datasources, dashboards and alerts channels on {{ inventory_hostname }}
      uri:
        url: "{{ 'https://' + monitoring_proxy.domain + grafana.subpath|string + item.url }}"
        validate_certs: no
        user: "admin"
        password: "{{ grafana.admin_password }}"
        method: POST
        body: "{{ item.body }}"
        force_basic_auth: yes
        body_format: json
      with_items:
        - { body: '{{ lookup("template","grafana/datasources/prometheus.json.j2") }}', url: '{{ "/api/datasources" }}' }
        - { body: '{{ lookup("template","grafana/datasources/elasticsearch_cordra_nsidr.json.j2") }}', url: '{{ "/api/datasources" }}' }
        - { body: '{{ lookup("template","grafana/datasources/cordra_nsidr_logstash_filebeat.json.j2") }}', url: '{{ "/api/datasources" }}' }
        - { body: '{{ lookup("template","grafana/datasources/elasticsearch_cordra_prov.json.j2") }}', url: '{{ "/api/datasources" }}' }
        - { body: '{{ lookup("template","grafana/datasources/cordra_prov_logstash_filebeat.json.j2") }}', url: '{{ "/api/datasources" }}' }
        - { body: '{{ lookup("template","grafana/notification_channels/ecoi_notification_channel.json.j2") }}', url: '{{ "/api/alert-notifications" }}' }
        - { body: '{{ lookup("template","grafana/dashboards/cordra_nsidr_ds.json.j2") }}', url: '{{ "/api/dashboards/db" }}' }
        - { body: '{{ lookup("template","grafana/dashboards/ecoi_systemd_services.json.j2") }}', url: '{{ "/api/dashboards/db" }}' }
        - { body: '{{ lookup("file","grafana/dashboards/system_status.json") }}', url: '{{ "/api/dashboards/db" }}' }
      #when: grafana_download.changed

  become: true
  become_user: root
  rescue:
    - debug:
        msg: "ERROR in Setup Grafana on {{ inventory_hostname }}"
  always:
    - debug:
        msg: "Setup Grafana FINISHED on {{ inventory_hostname }}"
  tags: ["install_software"]
